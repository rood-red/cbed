import cv2
import numpy as np

def apply_cartoonize(img):
    """Apply a cartoon effect to the image."""
    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # Apply median blur
    gray_blur = cv2.medianBlur(gray, 5)
    # Detect edges using adaptive thresholding
    edges = cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 10)
    # Apply bilateral filter for color smoothing
    color = cv2.bilateralFilter(img, 9, 300, 300)
    # Combine edges and smoothed color
    cartoon = cv2.bitwise_and(color, color, mask=edges)
    return cartoon

def apply_grayscale(img):
    """Apply grayscale filter to the image."""
    return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

def apply_edge_detection(img):
    """Apply Canny edge detection to the image."""
    edges = cv2.Canny(img, 100, 200)
    return edges

# Open the webcam
cap = cv2.VideoCapture(0)

# Default mode
filter_mode = 'normal'

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    
    if not ret:
        print("Failed to grab frame")
        break

    # Apply filters based on the current mode
    if filter_mode == 'cartoon':
        output = apply_cartoonize(frame)
    elif filter_mode == 'grayscale':
        output = apply_grayscale(frame)
    elif filter_mode == 'edge':
        output = apply_edge_detection(frame)
    else:
        output = frame

    # Display the result
    cv2.imshow('Webcam Feed - Press c for Cartoon, g for Grayscale, e for Edge Detection, n for Normal', output)

    # Capture key inputs
    key = cv2.waitKey(1) & 0xFF
    
    if key == ord('c'):
        filter_mode = 'cartoon'
    elif key == ord('g'):
        filter_mode = 'grayscale'
    elif key == ord('e'):
        filter_mode = 'edge'
    elif key == ord('n'):
        filter_mode = 'normal'
    elif key == ord('q'):  # Press 'q' to quit
        break

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()
